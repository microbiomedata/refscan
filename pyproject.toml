[project]
name = "refscan"
version = "0.0.0"
description = "Command-line program that scans the NMDC MongoDB database for referential integrity violations"
authors = []
# Note: We constrain the Python version to 3.9.* because we know that `nmdc-schema`, which depends upon this
#       package, is also constrained to Python 3.9.* (according to its `pyproject.toml` file).
#       Reference: https://github.com/microbiomedata/nmdc-schema/blob/main/pyproject.toml#L34
requires-python = ">= 3.9, < 3.10"
readme = "README.md"
keywords = [
    "mongodb",
    "mongo",
    "relationships",
    "reference",
    "database",
    "data",
    "referential integrity",
    "scan",
]
dependencies = [
    # We use `linkml-runtime` to facilitate using `nmdc-schema`.
    # Docs: https://linkml.io/linkml/developers/schemaview.html#linkml_runtime.utils.schemaview.SchemaView
    "linkml-runtime >= 1.7.5, < 2",
    # We use `pymongo` to communicate with MongoDB servers.
    # Docs: (https://pymongo.readthedocs.io/en/stable/
    "pymongo >= 4.7.1, < 5",
    # We use `rich` to format console output.
    # Docs: https://rich.readthedocs.io/en/stable/index.html
    "rich >= 13.7.1, < 14",
    # We use `typer` as a CLI framework.
    # Docs: https://typer.tiangolo.com/
    "typer >= 0.15.1, < 0.16",
]

[project.urls]
Homepage = "https://github.com/microbiomedata/refscan"
Repository = "https://github.com/microbiomedata/refscan"
Documentation = "https://github.com/microbiomedata/refscan"

[project.scripts]
refscan = "refscan.cli.cli:app"

[dependency-groups]
dev = [
    # We use `black` for code formatting.
    # Usage: $ uv run black --line-length 120 .
    # Docs: https://black.readthedocs.io/en/stable/
    "black >= 24.4.2, < 25",
    # We use `pyinstrument` for performance profiling.
    # Usage: $ uv run pyinstrument --from-path refscan --help
    # Docs: https://pyinstrument.readthedocs.io/en/latest/guide.html#profile-a-python-cli-command
    "pyinstrument >= 4.6.2, < 5",
    # We use `pytest` to run tests.
    # Usage: $ uv run pytest
    # Docs: https://docs.pytest.org/en/stable/contents.html
    "pytest >= 8.2.2, < 9",
    "pytest-cov >= 5.0.0, < 6",
    # We use `mongomock` to test MongoDB interaction without involving a real MongoDB instance.
    # Docs: https://github.com/mongomock/mongomock
    "mongomock >= 4.3.0, < 5",
    # We use `mypy` to perform static type checking.
    # Usage: $ uv run mypy
    # Docs: https://mypy.readthedocs.io/en/stable/
    "mypy >= 1.16.0, < 2",
]

[build-system]
# Note: The `migrate-to-uv` tool (i.e. https://github.com/mkniewallner/migrate-to-uv), which we used to switch
#       from Poetry to `uv`, set this to use `hatchling`. We then changed it to use `uv_build` instead.
#       Reference: https://docs.astral.sh/uv/concepts/build-backend/#using-the-uv-build-backend
requires = ["uv_build >= 0.8.14, < 0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
# Note: We specify `module-name` here to tell the `uv_build` backend that our main module is in `refscan/`
#       (as opposed to being in a `src/` directory, which is where the backend would look for it by default).
#       Reference: https://docs.astral.sh/uv/concepts/build-backend/#modules
module-name = "refscan"
module-root = ""

[tool.pytest.ini_options]
# Make it so that, when someone runs `$ uv run pytest`, in addition to running the tests, it also (a) runs doctests
# defined in Python modules, and (b) measures—via the `pytest-cov` plugin—test coverage within the `refscan` folder.
# Reference (a): https://docs.pytest.org/en/stable/how-to/doctest.html#how-to-run-doctests
# Reference (b): https://pytest-cov.readthedocs.io/en/latest/config.html#configuration
addopts = "--doctest-modules --cov=refscan"

[tool.black]
# Make it so that, when someone runs `$ uv run black`, these default CLI options are used.
# Reference: https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-format
line-length = 120

[tool.mypy]
# Make it so, when someone runs `$ uv run mypy`, these default CLI options are used.
# Reference: https://mypy.readthedocs.io/en/stable/config_file.html
files = "."

[[tool.mypy.overrides]]
# Silence the following error:
# > Skipping analyzing "linkml_runtime": module is installed, but missing library stubs or py.typed marker  [import-untyped] 
#
# Note: We first tried using the following, but it seemed to have no effect on the behavior of mypy when run via `$ poetry run mypy` (back when we used poetry instead of uv).
#       ```
#       [mypy-linkml_runtime]
#       ignore_missing_imports = true
#       ```
#       So, we—instead—used the syntax shown on: https://stackoverflow.com/a/74198016
#
module = "linkml_runtime"
ignore_missing_imports = true
